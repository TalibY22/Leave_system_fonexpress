#Things to do 

A way to show days till he returns = 
Reason should be provide when rejecting a leave = 
A way to print leave record for employees = 
Implement  a way to check Avaliable paid leaves for a employee = dependant
Add a table for completed leaves to check when a employee come back from a leave  = 
Automatic changing of status of leaves = 
users to be able to view their leave requests = 
Enable users to be created with the employee form = 
Ajax requests = 








#User feedback 
1 = leave dedacting  = done
2 = leave add on leave should be added on 
3 = attachment for types of leave 
4 = omit public holidays from leave days 
5 = ability to recall recall accompanied with reason 
6 = a remainder to be sent about users who are about to go on leave = working on it
7 = add filters sorting through data = DONE 
8 = rejection of if the days are over 
9 = only 1.75 days can be taken for a paid leave in a month 
10 = NOTIFICATION FOR EMPLOYEE WHO ARE ABOUT TO GO  FOR LEAVE = 
11





#priority 
1=menu from db 
2=






















#FUTURE CODE AFTER FEEFBACK
@receiver(post_save, sender=Leave)
def update_leave_status(sender, instance, created, **kwargs):
    if created:  
        if date.today() >= instance.start_date:
            
            active_status = Status.objects.get(name='Active')  
            instance.status = active_status
            instance.save()
    
   
    if date.today() >= instance.end_date:
        
        if instance.status.name == 'Active':
            completed_status = Status.objects.get(name='Completed')  
            instance.save()




import openpyxl
from django.http import HttpResponse
from .models import Leave  # Import your Leave model

def export_leaves_to_excel(request):
    # Create an in-memory workbook and worksheet
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = 'Leave Requests'
    
    # Define the header row
    headers = ['Employee', 'Leave Type', 'Reason', 'Duration', 'Start Date', 'End Date', 'Person Covering', 'Status']
    ws.append(headers)
    
    # Add data rows
    leaves = Leave.objects.all()
    for leave in leaves:
        ws.append([leave.user.username, leave.leave_type, leave.reason, leave.duration, leave.start_date, leave.end_date, leave.person_covering, leave.status])
    
    # Prepare response
    response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
    response['Content-Disposition'] = 'attachment; filename=leave_requests.xlsx'
    wb.save(response)
    
    return response



@login_required
@user_passes_test(is_manager)
def Export_excel(request,id):

     previous_leave = Leave.objects.filter(user_id=id,status_id=2)
      
     Data = {
        'Name': previous_leave.user_id,
        'Reason': previous_leave.reason,
        'start_date': previous_leave.start_date,
        'Person Covered': previous_leave.person_covering ,
        'Duration': previous_leave.duration,
    }
     df = pd.DataFrame(Data)

    # Creating an in-memory output stream for the Excel file
     output = io.BytesIO()
     with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='Employees')

    # Setting the HTTP response
     response = HttpResponse(
        output.getvalue(),
        content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )
     response['Content-Disposition'] = 'attachment; filename=employees.xlsx'

     return response



